<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"><html><head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"><title>GtkTreeView: A short tutorial</title>

<link rel="stylesheet" href="gtktreeview-tutorial_ficheros/liw.css" type="text/css"></head>

<body>
<div class="main">
<h1>GtkTreeView: A short tutorial</h1>
<blockquote>
<strong>Abstract</strong><p>I try to introduce the GtkTreeView widget in Gtk+
		2.0 to the application programmer. I don't intend to
		cover all aspects of the widgets; that is the job of
		the the reference manual. Also, I only know some parts
		of GtkTreeView. I will assume general knowledge of
		programming with Gtk+ and Python.</p>
<p>16 October 2002, Lars Wirzenius (<a href="mailto:liw@iki.fi">liw@iki.fi</a>).</p>
</blockquote>



    <p>Version 2.0 of Gtk+ introduces its third generation of tree
    and list widgets. Version 1.0 had GtkList and GtkTree, version 1.2
    had GtkCList and GtkCTree, and now version 2.0 has GtkTreeView,
    which servers both as a list and a tree. With each version, the
    power and usefulness of the widgets have increased.</p>

    <p>GtkTreeView uses a Model/View/Controller approach. This
    means that the code is divided into a data structure representing
    user's data ("the model"), the widgets that display the data and
    interact with the user ("the view"), and some logic to tie things
    nicely together ("the controller"). The model is implemented by
    GtkTreeModel (actually, classes implementing that interface), the
    view by GtkTreeView with some helpers, and the controller by the
    user code.</p>

    <p>This sounds unnecessarily complicated, but the complexity
    is local, and this aproach actually simplifies overall program
    structure. For example, it is often necessary to view the same data
    (i.e., model) in different ways, or in different windows. Think,
    for example, of a programmer's editor: the same source code may
    be viewed in several windows at the same time, and changes in one
    window should be shown in all the others, as well. Thus, it makes
    sense to separate the storage of the text from its display, rather
    than storing the text in each window widget.</p>

    <p>The example application in this article lets the user manage
    a folder tree. The folders are virtual, not real directories in
    the filesystem, to keep the code simpler. The example is actually
    derived from Lodju, in which the folders have nothing to do with
    the filesystem.</p>

    <p>The <a href="http://developer.gnome.org/doc/API/2.0/gtk/treewidget.html">official Gtk+ 2.0 API reference documentation for GtkTreeView</a>
    should be read together with this tutorail, even if it is a bit
    sparse in some details.</p>
    
    <p>I thank the people on the Gtk+ developer IRC channel for
    encouragement and feedback.</p>

<h2>The model: GtkTreeModel, GtkTreeStore</h2>


    <p>GtkTreeModel is the interface definition for the model part of
    GtkTreeView.  The application programmer could define his own model,
    but GtkTreeView provides the two most popular ones: a linear list
    with GtkListStore, and a hierarchical tree with GtkTreeStore. The
    GtkTreeView reference manual claims that few application programmers
    will need to use anything else, and they may well be right. Since I
    have little experience with GtkListStore, this article will discuss
    GtkTreeStore only.</p>
    
    <p>The first step in using GtkTreeView, then, is to set up a
    GtkTreeStore to keep your data. The model contains some number of
    rows and each row contains the same number of columns. The cells
    in each column contain the same type of data. These columns are
    declared when the model is created, though they can be changed later,
    if necessary.</p>
    
    <div class="example">
<p><strong>Example</strong></p>    
    
    	

	<blockquote><pre>model = gtk.TreeStore(gobject.TYPE_PYOBJECT, gobject.TYPE_STRING)</pre></blockquote>
    
	<p>Here we create a GtkTreeStore with two columns. The first
	column contains a Python object (of any type), the second a
	string. There are several different types available, see the
	gobject module contents.  We will be using the first column
	to hold a Python object containing all the information about a
	folder and the second column to display its name.</p>
    
	<p>Note difference in naming. GtkTreeView is the C type
	name and gtk.TreeStore is the Python class that corresponds
	to GtkTreeView.  For more information, see the PyGTK
	documentation.</p>

    </div>
    
    <p>Note that it does not matter in which order you define
    the columns.  The order in which GtkTreeStore knows them does not
    affect how they are displayed to the user. It is not even necessary
    to display all columns to the user.</p>
    
    <p>Nodes can be added to a GtkTreeStore in several ways. My
    preference is to use the gtk_tree_store_insert_before function,
    known as the insert_before method in Python.</p>
    
    <div class="example">
<p><strong>Example</strong></p>

    	

<blockquote><pre>folder = new_folder()
iter = model.insert_before(None, None)
iter.set_value(iter, 0, folder)
iter.set_value(iter, 1, folder["name"])</pre></blockquote>
    
	<p>This code first inserts an empty row into the model,
	then sets the values in both cells for the row.</p>

    </div>
    
    <p>A GtkTreeModel lets the programmer refer to rows in various
    ways.  We see here a GtkTreeIter object, which essentially works as a
    pointer to the row.  We then use this pointer, plus a column number,
    to refer to a cell.</p>
    
    <p>GtkTreeIter objects are also used as arguments to
    gtk_tree_store_insert_before, to define the parent of the new node,
    and the sibling that is to follow the new node. If the parent is NULL
    (None in Python), as in the example above, the new node is added
    to the top level, and if sibling is NULL, then the new node becomes
    the last child of the parent.</p>
    
    <p>The GtkTreeIter objects may be temporary, and may become
    invalidated as the tree is modified by adding or removing nodes. It
    is probably a bad idea to store them.</p>
    
    <p>You can also remove rows (gtk_tree_store_remove
    a.k.a. model.remove).  For other operations, please see the API
    reference documentation.</p>



<h2>The view: GtkTreeView, GtkTreeViewColumn, GtkCellRenderer</h2>


    <p>The GtkTreeView widget is the view in the Module/View/Controller
    approach.  It takes care of displaying the data stored in a model
    (GtkTreeStore or GtkListStore) to the user. You can have several
    GtkTreeViews for a single model, and changes to the model will be
    displayed immediately in all of them.</p>
    
    <p>To use GtkTreeView, you need to create the widget itself,
    then create GtkTreeViewColumns for the columns to display and
    GtkCellRenderers to tell the columns how to display a cell in the
    column.</p>
    
    <div class="example">
<p><strong>Example</strong></p>

    	

<blockquote><pre>view = gtk.TreeView(model)
renderer = gtk.CellRendererText()
column = gtk.TreeViewColumn("Folder", renderer, text=1)
view.append_column(column)</pre></blockquote>
    
	<p>This code creates a new GtkTreeView and attaches it to a model.
	Then it creates a text cell renderer and a column and adds those to
	the view. "Folder" is the name of the column, displayed at the top
	of the column.</p>
	
    </div>
    
    <p>There are several GtkCellRenderers in the Gtk+ library, and
    you could write your own, if those are not enough.</p>
    
    <p>The user's selections in a GtkTreeView (per view) are tracked
    using the GtkTreeSelection object. If your code needs to notice when
    the user changes the selection, connect to the GtkTreeSelection's
    "changed" signal.  You can also have the selection object call a
    function for each selected node, or programmatically change the
    selection. See the API for details.</p>
    
    <div class="example">
<p><strong>Example</strong></p>
	
    	

<blockquote><pre>selection = view.get_selection()
selection.connect("changed", display_selected_folder)</pre></blockquote>
	
	<p>This code connects the "changed" signal to a function that
	displays the contents of a selected folder.</p>

    </div>

    <p>You need to tell the GtkTreeView explicitly that the user is
    allowed to rearrange the folder tree using drag-and-drop. Fortunately,
    after telling this once, the widget takes care of the rest.</p>
    
    <div class="example">
<p><strong>Example</strong></p>
	
    	

	<blockquote><pre>view.set_reorderable(gtk.TRUE)</pre></blockquote>
	
    </div>
    
    <p>Unfortunately, when this tutorial is being written, the widget
    has a bug in its drag-and-drop logic. It does not allow a folder to be
    made a subfolder of another by dropping it onto that folder. It works,
    if the target folder already has children, but not otherwise. I am
    told that this will be fixed. Meanwhile, one can work around this
    by adding "Move as child folder" and "Move to top level" commands
    (e.g., menu entries) to the user interface. They can be implemented
    using the gtk_tree_store_remove and gtk_tree_store_insert_before
    functions already mentioned.</p>
    
    <div class="example">
<p><strong>Example</strong></p>
	
    	

<blockquote><pre>folder = model.get_value(old_iter, 0)
model.remove(old_iter)
new_iter = model.insert_before(new_parent, None)
model.set_value(new_iter, 0, folder)
model.set_value(new_iter, 1, folder["name"])</pre></blockquote>
	
	<p>This code moves a node from old_iter to be the last child
	of the new_parent node.</p>

    </div>



<h2>Example source code</h2>


    <p></p><blockquote><pre># This is an example for demonstrating use of the GtkTreeView widget.
# The code in this example is not particularly good: it is written to
# concentrate on widget usage demonstration, not for maintainability.

import pygtk
pygtk.require("2.0")
import gtk
import gobject

view = None
choose_parent_view = None
dialog = None

def move(old_iter, new_parent, model):
    if old_iter:
        folder = model.get_value(old_iter, 0)
        model.remove(old_iter)
        new_iter = model.insert_before(new_parent, None)
        model.set_value(new_iter, 0, folder)
        model.set_value(new_iter, 1, folder["name"])

def dialog_ok(*args):
    dialog.hide()
    model, parent_iter = choose_parent_view.get_selection().get_selected()
    model, old_iter = view.get_selection().get_selected()
    if parent_iter and old_iter:
        move(old_iter, parent_iter, model)

def dialog_cancel(*args):
    dialog.hide()

def choose_parent(*args):
    dialog.show()

def move_to_top(*args):
    model, old_iter = view.get_selection().get_selected()
    if old_iter:
        move(old_iter, None, model)

def quit(*args):
    gtk.main_quit()

def make_view(model):
    # Create the view itself.
    view = gtk.TreeView(model)
    renderer = gtk.CellRendererText()
    column = gtk.TreeViewColumn("Folder", renderer, text=1)
    view.append_column(column)
    view.show()

    # Create scrollbars around the view.
    scrolled = gtk.ScrolledWindow()
    scrolled.add(view)
    scrolled.show()

    return view, scrolled

def make_buttons(list):
    buttonbox = gtk.HBox()
    for label, func in list:
        button = gtk.Button()
        button.set_label(label)
        button.connect("clicked", func)
        button.show()
        buttonbox.pack_start(button, expand=gtk.FALSE, fill=gtk.FALSE)
    buttonbox.show()
    return buttonbox

def main():
    # Create the model.
    model = gtk.TreeStore(gobject.TYPE_PYOBJECT, gobject.TYPE_STRING)

    # Populate the model with data. We represent folders with Python
    # dicts (hash tables or hashmaps in other languages), for simplicity.
    # In a real program, they would be programmer defined classes.
    for i in range(100):
        folder = { "name": "folder %d" % i, "files": ["foo", "bar"] }
        iter = model.insert_before(None, None)
        model.set_value(iter, 0, folder)
        model.set_value(iter, 1, folder["name"])
    
    # Create the main view.
    global view
    view, scrolled = make_view(model)
    view.set_reorderable(gtk.TRUE)

    # Create some command buttons.
    buttonbox = make_buttons([("Quit", quit), ("Choose parent", choose_parent),
                              ("Move to top", move_to_top)])
    
    # Create a vertical box to hold the above stuff.
    vbox = gtk.VBox()
    vbox.pack_start(buttonbox, expand=gtk.FALSE, fill=gtk.FALSE)
    vbox.pack_start(scrolled, expand=gtk.TRUE, fill=gtk.TRUE)
    vbox.show()

    # Create toplevel window to show it all.
    win = gtk.Window(gtk.WINDOW_TOPLEVEL)
    win.connect("delete_event", quit)
    win.add(vbox)
    win.show()
    win.resize(300, 500)
    
    # Create the GtkTreeView for choosing a parent.
    global choose_parent_view
    choose_parent_view, scrolled = make_view(model)
    
    buttonbox = make_buttons([("OK", dialog_ok), ("Cancel", dialog_cancel)])

    vbox = gtk.VBox()
    vbox.pack_start(scrolled, expand=gtk.TRUE, fill=gtk.TRUE)
    vbox.pack_start(buttonbox, expand=gtk.FALSE, fill=gtk.FALSE)
    vbox.show()

    global dialog
    dialog = gtk.Window(gtk.WINDOW_TOPLEVEL)
    dialog.set_default_size(200, 400)
    dialog.add(vbox)
    
    # Run the Gtk+ main loop.
    gtk.main()
    
if __name__ == "__main__":
    main()
</pre></blockquote>



</div>
</body></html>